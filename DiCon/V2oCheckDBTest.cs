using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace DiCon
{
    [TestFixture]
    class V2oCheckDBTest
    {
        [Test]
        public void CheckSamePlatformSameWordsize()
        {
            V2oCheckDB ckdb = new V2oCheckDB();
            Console.WriteLine("Linux (x86)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Linux (x86)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86)", "一覧になし"), false);

            Console.WriteLine("Linux (x86-64)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Linux (x86-64)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (x86-64)", "一覧になし"), false);

            Console.WriteLine("Linux (Itanium)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Linux (Itanium)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false); 
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Linux (Itanium)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2003 (x86)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Microsoft Windows NT (x86)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Microsoft Windows 2000 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Microsoft Windows 2003 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Microsoft Windows 2008 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (x86)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2003 (AMD64/EM64T)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2000 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2003 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2008 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2012 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (AMD64/EM64T)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2003 (Itanium)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2003 (Itanium)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2003 (Itanium)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2008 (x86)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Microsoft Windows NT (x86)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Microsoft Windows 2000 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Microsoft Windows 2003 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Microsoft Windows 2008 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (x86)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2008 (AMD64/EM64T)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2000 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2003 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2008 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2012 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 (AMD64/EM64T)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2008 R2 (AMD64/EM64T)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2000 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2003 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2008 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2012 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2008 R2 (AMD64/EM64T)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2012 (AMD64/EM64T)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2000 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2003 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2008 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2012 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Microsoft Windows 2012 (AMD64/EM64T)", "一覧になし"), false);

            Console.WriteLine("HP-UX PA-RISC (32bit)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "HP-UX PA-RISC (32bit)"), false); // trueではない
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (32bit)", "一覧になし"), false);

            Console.WriteLine("HP-UX PA-RISC (64bit)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "HP-UX PA-RISC (64bit)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX PA-RISC (64bit)", "一覧になし"), false);


            Console.WriteLine("HP-UX Itanium");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "HP-UX Itanium"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("HP-UX Itanium", "一覧になし"), false);

            Console.WriteLine("IBM AIX POWER System (64bit)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "IBM AIX POWER System (64bit)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("IBM AIX POWER System (64bit)", "一覧になし"), false);

            Console.WriteLine("Sun Solaris SPARC (64bit)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "Sun Solaris SPARC (64bit)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris SPARC (64bit)", "一覧になし"), false);

            Console.WriteLine("Sun Solaris x86-64 (64-bit)");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Sun Solaris x86 (32-bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "Sun Solaris x86-64 (64-bit)"), true);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("Sun Solaris x86-64 (64-bit)", "一覧になし"), false);

            Console.WriteLine("不明");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("不明", "一覧になし"), false);

            Console.WriteLine("一覧になし");
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "不明"), false);
            Assert.AreEqual(ckdb.CheckSamePlatformSameWordsize("一覧になし", "一覧になし"), false);
        }
        [Test]
        public void CheckEqualSystem()
        {
            V2oCheckDB ckdb = new V2oCheckDB();

            Console.WriteLine("Linux (x86)");
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Linux (x86)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Linux (x86-64)"), false); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86)","一覧になし"), false);

            Console.WriteLine("Linux (x86-64)");
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Linux (x86-64)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (x86-64)","一覧になし"), false);

            Console.WriteLine("Linux (Itanium)");
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Linux (Itanium)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Linux (Itanium)","一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2003 (x86)");
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Microsoft Windows 2000 (AMD64/EM64T)"), false); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Microsoft Windows 2003 (x86)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Microsoft Windows 2003 (AMD64/EM64T)"), false); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Microsoft Windows 2008 (AMD64/EM64T)"), false); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Microsoft Windows 2012 (AMD64/EM64T)"), false); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Microsoft Windows 2012 R2 (AMD64/EM64T)"), false); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (x86)","一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2003 (AMD64/EM64T)");
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Microsoft Windows 2003 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (AMD64/EM64T)","一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2003 (Itanium)");
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Microsoft Windows 2003 (Itanium)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2003 (Itanium)","一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2008 (x86)");
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Microsoft Windows 2000 (AMD64/EM64T)"), false); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Microsoft Windows 2003 (AMD64/EM64T)"), false); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Microsoft Windows 2008 (x86)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Microsoft Windows 2008 (AMD64/EM64T)"), false); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)", "Microsoft Windows 2012 (AMD64/EM64T)"), false); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","Sun Solaris SPARC (64bit)"),false );
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (x86)","一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2008 (AMD64/EM64T)");
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Microsoft Windows 2008 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 (AMD64/EM64T)","一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2008 R2 (AMD64/EM64T)");
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Microsoft Windows 2008 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)","一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2012 (AMD64/EM64T)");
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2012 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Microsoft Windows 2012 (AMD64/EM64T)", "一覧になし"), false);

            Console.WriteLine("HP-UX PA-RISC (32bit)");
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","HP-UX PA-RISC (32bit)"), false); // True ではない
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (32bit)","一覧になし"), false);

            Console.WriteLine("HP-UX PA-RISC (64bit)");
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "HP-UX PA-RISC (64bit)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX PA-RISC (64bit)", "一覧になし"), false);


            Console.WriteLine("HP-UX Itanium");
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","HP-UX Itanium"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("HP-UX Itanium","一覧になし"), false);

            Console.WriteLine("IBM AIX POWER System (64bit)");
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","IBM AIX POWER System (64bit)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("IBM AIX POWER System (64bit)","一覧になし"), false);

            Console.WriteLine("Sun Solaris SPARC (64bit)");
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","Sun Solaris SPARC (64bit)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris SPARC (64bit)","一覧になし"), false);

            Console.WriteLine("Sun Solaris x86-64 (64-bit)");
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Sun Solaris x86 (32-bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","Sun Solaris x86-64 (64-bit)"), true);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("Sun Solaris x86-64 (64-bit)","一覧になし"), false);

            Console.WriteLine("不明");
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("不明","一覧になし"), false);

            Console.WriteLine("一覧になし");
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","不明"), false);
            Assert.AreEqual(ckdb.CheckEqualSystem("一覧になし","一覧になし"), false);
        }
        [Test]
        public void CheckSameSystem()
        {
            V2oCheckDB ckdb = new V2oCheckDB();
            Console.WriteLine("Linux (x86)");
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Linux (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Linux (x86-64)"), true); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86)", "一覧になし"), false);

            Console.WriteLine("Linux (x86-64)");
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Linux (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Linux (x86-64)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (x86-64)", "一覧になし"), false);

            Console.WriteLine("Linux (Itanium)");
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Linux (Itanium)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Linux (Itanium)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2003 (x86)");
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Microsoft Windows NT (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Microsoft Windows 2000 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Microsoft Windows 2000 (AMD64/EM64T)"), true); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Microsoft Windows 2003 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Microsoft Windows 2003 (AMD64/EM64T)"), true); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Microsoft Windows 2008 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Microsoft Windows 2008 (AMD64/EM64T)"), true); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), true); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Microsoft Windows 2012 (AMD64/EM64T)"), true); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), true); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (x86)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2003 (AMD64/EM64T)");
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows NT (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2000 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2000 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2003 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2003 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2008 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2008 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2012 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (AMD64/EM64T)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2003 (Itanium)");
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2003 (Itanium)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2003 (Itanium)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2008 (x86)");
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Microsoft Windows NT (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Microsoft Windows 2000 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Microsoft Windows 2000 (AMD64/EM64T)"), true); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Microsoft Windows 2003 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Microsoft Windows 2003 (AMD64/EM64T)"), true); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Microsoft Windows 2008 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Microsoft Windows 2008 (AMD64/EM64T)"), true); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), true); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Microsoft Windows 2012 (AMD64/EM64T)"), true); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), true); // 64bit->32bit
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (x86)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2008 (AMD64/EM64T)");
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows NT (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2000 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2000 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2003 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2003 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2008 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2008 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2012 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 (AMD64/EM64T)", "一覧になし"), false);


            Console.WriteLine("Microsoft Windows 2008 R2 (AMD64/EM64T)");
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows NT (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2000 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2000 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2003 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2003 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2008 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2008 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2012 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2008 R2 (AMD64/EM64T)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2012 (AMD64/EM64T)");
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows NT (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2000 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2000 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2003 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2003 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2008 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2008 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2012 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 (AMD64/EM64T)", "一覧になし"), false);

            Console.WriteLine("Microsoft Windows 2012 R2 (AMD64/EM64T)");
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Microsoft Windows NT (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Microsoft Windows 2000 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Microsoft Windows 2000 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Microsoft Windows 2003 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Microsoft Windows 2003 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Microsoft Windows 2008 (x86)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Microsoft Windows 2008 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Microsoft Windows 2012 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Microsoft Windows 2012 R2 (AMD64/EM64T)", "一覧になし"), false);

            Console.WriteLine("HP-UX PA-RISC (64bit)");
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "HP-UX PA-RISC (32bit)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "HP-UX PA-RISC (64bit)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX PA-RISC (64bit)", "一覧になし"), false);

            Console.WriteLine("HP-UX Itanium");
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "HP-UX Itanium"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("HP-UX Itanium", "一覧になし"), false);

            Console.WriteLine("IBM AIX POWER System (64bit)");
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "IBM AIX POWER System (32bit)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "IBM AIX POWER System (64bit)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("IBM AIX POWER System (64bit)", "一覧になし"), false);

            Console.WriteLine("Sun Solaris SPARC (64bit)");
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Sun Solaris SPARC (32bit)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "Sun Solaris SPARC (64bit)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris SPARC (64bit)", "一覧になし"), false);

            Console.WriteLine("Sun Solaris x86-64 (64-bit)");
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Sun Solaris x86 (32-bit)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "Sun Solaris x86-64 (64-bit)"), true);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("Sun Solaris x86-64 (64-bit)", "一覧になし"), false);

            Console.WriteLine("不明");
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("不明", "一覧になし"), false);

            Console.WriteLine("一覧になし");
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Linux (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Linux (x86-64)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Linux (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Microsoft Windows NT (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Microsoft Windows 2000 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Microsoft Windows 2000 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Microsoft Windows 2003 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Microsoft Windows 2003 (Itanium)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Microsoft Windows 2008 (x86)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Microsoft Windows 2008 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Microsoft Windows 2008 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Microsoft Windows 2012 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Microsoft Windows 2012 R2 (AMD64/EM64T)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "IBM AIX POWER System (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "IBM AIX POWER System (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Sun Solaris SPARC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "Sun Solaris SPARC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "不明"), false);
            Assert.AreEqual(ckdb.CheckSameSystem("一覧になし", "一覧になし"), false);
        }
        [Test]
        //[Ignore("CheckHPUX_PA2IT")]
        public void CheckHPUX_PA2IT()
        {
            V2oCheckDB ckdb = new V2oCheckDB();
            Assert.AreEqual(ckdb.CheckHPUX_PA2IT("HP-UX Itanium",                "HP-UX PA-RISC (32bit)"), true);
            Assert.AreEqual(ckdb.CheckHPUX_PA2IT("HP-UX Itanium",                "HP-UX PA-RISC (64bit)"), true);
            Assert.AreEqual(ckdb.CheckHPUX_PA2IT("HP-UX Itanium",                "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckHPUX_PA2IT("HP-UX PA-RISC (32bit)",        "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckHPUX_PA2IT("HP-UX PA-RISC (64bit)",        "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckHPUX_PA2IT("HP-UX Itanium",                "Microsoft Windows 2003 (x86)"), false);
            Assert.AreEqual(ckdb.CheckHPUX_PA2IT("Microsoft Windows 2003 (x86)", "HP-UX PA-RISC (32bit)"), false);
            Assert.AreEqual(ckdb.CheckHPUX_PA2IT("Microsoft Windows 2003 (x86)", "HP-UX PA-RISC (64bit)"), false);
            Assert.AreEqual(ckdb.CheckHPUX_PA2IT("Microsoft Windows 2003 (x86)", "HP-UX Itanium"), false);
            Assert.AreEqual(ckdb.CheckHPUX_PA2IT("HP-UX Itanium",                "不明"), false);
            Assert.AreEqual(ckdb.CheckHPUX_PA2IT("不明",                         "HP-UX Itanium"), false);
        }
        [Test]
        public void GetVersionNumberString()
        {
            V2oCheckDB ckdb = new V2oCheckDB();
            Assert.AreEqual(ckdb.GetVersionNumberString(" 8.1.6.x"),            "8.1.6.0");
            Assert.AreEqual(ckdb.GetVersionNumberString(" 8.1.7.0 - 8.1.7.3"),  "8.1.7.0");
            Assert.AreEqual(ckdb.GetVersionNumberString(" 8.1.7.4 (Terminal)"), "8.1.7.4");
            Assert.AreEqual(ckdb.GetVersionNumberString(" 9.1.0.4"),            "9.1.0.4");
            Assert.AreEqual(ckdb.GetVersionNumberString("10.1.0.5 (Terminal)"), "10.1.0.5");
            Assert.AreEqual(ckdb.GetVersionNumberString("10.2.0.1 - 10.2.0.4"), "10.2.0.1");
            Assert.AreEqual(ckdb.GetVersionNumberString("10.2.0.5 (Terminal)"), "10.2.0.5");
            Assert.AreEqual(ckdb.GetVersionNumberString("11.1.0.6"),            "11.1.0.6");
            Assert.AreEqual(ckdb.GetVersionNumberString("11.1.0.7 (Terminal)"), "11.1.0.7");
            Assert.AreEqual(ckdb.GetVersionNumberString("11.2.0.1"),            "11.2.0.1");
            Assert.AreEqual(ckdb.GetVersionNumberString("11.2.0.2"),            "11.2.0.2");
            Assert.AreEqual(ckdb.GetVersionNumberString("11.2.0.3"),            "11.2.0.3");
            Assert.AreEqual(ckdb.GetVersionNumberString("11.2.0.4 (Terminal)"), "11.2.0.4");
            Assert.AreEqual(ckdb.GetVersionNumberString("12.1.0.1"),            "12.1.0.1");
            Assert.AreEqual(ckdb.GetVersionNumberString("12.1.0.2 (Terminal)"), "12.1.0.2");
            Assert.AreEqual(ckdb.GetVersionNumberString("不明"),                "");
            Assert.AreEqual(ckdb.GetVersionNumberString("一覧になし"),           "");
        }
        [Test]
        public void CheckDirectUpgrade()
        {
            V2oCheckDB ckdb = new V2oCheckDB();
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "12.1.0.2"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "12.1.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "11.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "11.2.0.3"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "11.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "11.2.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "11.1.0.6"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "10.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "10.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "10.2.0.2"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "10.2.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "10.1.0.5"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "10.1.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "9.2.0.8"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "9.2.0.5"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "9.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.2", "9.2.0.3"), false);

            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "12.1.0.2"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "12.1.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "11.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "11.2.0.3"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "11.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "11.2.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "11.1.0.6"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "10.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "10.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "10.2.0.2"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "10.2.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "10.1.0.5"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "10.1.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "9.2.0.8"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "9.2.0.5"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "9.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("12.1.0.1", "9.2.0.3"), false);

            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "12.1.0.2"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "12.1.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "11.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "11.2.0.3"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "11.2.0.2"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "11.2.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "11.1.0.6"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "10.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "10.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "10.2.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "10.1.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "9.2.0.5"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "9.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.4", "9.2.0.3"), false);

            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "11.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "11.2.0.3"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "11.2.0.2"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "11.2.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "11.1.0.6"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "10.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "10.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "10.2.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "10.1.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "9.2.0.5"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "9.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.3", "9.2.0.3"), false);

            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "11.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "11.2.0.3"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "11.2.0.2"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "11.2.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "11.1.0.6"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "10.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "10.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "10.2.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "10.1.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "9.2.0.5"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "9.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.2", "9.2.0.3"), false);

            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.1", "11.2.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.1", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.1", "11.1.0.6"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.1", "10.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.1", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.1", "10.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.1", "10.2.0.1"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.1", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.1", "10.1.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.1", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.1", "9.2.0.5"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.1", "9.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.2.0.1", "9.2.0.3"), false);

            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.7", "11.1.0.6"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.7", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.7", "10.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.7", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.7", "10.1.0.2"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.7", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.7", "9.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.7", "9.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.7", "9.2.0.3"), false);

            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.6", "11.1.0.6"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.6", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.6", "10.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.6", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.6", "10.1.0.2"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.6", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.6", "9.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.6", "9.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("11.1.0.6", "9.2.0.3"), false);

            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.4", "10.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.4", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.4", "10.1.0.2"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.4", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.4", "9.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.4", "9.2.0.3"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.4", "9.0.1.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.4", "9.0.1.3"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.4", "8.1.7.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.4", "8.1.7.3"), false);

            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.1", "10.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.1", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.1", "10.1.0.2"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.1", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.1", "9.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.1", "9.2.0.3"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.1", "9.0.1.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.1", "9.0.1.3"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.1", "8.1.7.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.2.0.1", "8.1.7.3"), false);

            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.5", "11.1.0.7"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.5", "10.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.5", "10.1.0.5"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.5", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.5", "9.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.5", "9.0.1.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.5", "9.0.1.0"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.5", "8.1.7.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.5", "8.1.7.0"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.5", "8.0.6.3"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.5", "8.0.6.0"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.5", "8.0.5.1"), false);

            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.2", "11.1.0.7"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.2", "10.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.2", "10.1.0.5"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.2", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.2", "9.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.2", "9.0.1.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.2", "9.0.1.0"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.2", "8.1.7.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.2", "8.1.7.0"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.2", "8.0.6.3"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.2", "8.0.6.0"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("10.1.0.2", "8.0.5.1"), false);

            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "11.1.0.7"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "10.2.0.4"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "10.1.0.5"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "9.2.0.8"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "9.0.1.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "9.0.1.0"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "8.1.7.4"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "8.1.7.0"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "8.0.6.3"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "8.0.6.0"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "8.0.5.2"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "8.0.5.0"), false);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "7.3.4.5"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "7.3.4.0"), true);
            Assert.AreEqual(ckdb.CheckDirectUpgrade("9.2.0.8", "7.2.3.0"), false);
        }
        [Test]
        public void CheckConnect()
        {
            V2oCheckDB ckdb = new V2oCheckDB();
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "11.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "11.2.0.3"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "11.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "11.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "11.1.0.6"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "10.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "10.2.0.3"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "10.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "10.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "10.1.0.5"), false);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "10.1.0.4"), false);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "10.1.0.3"), false);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.2", "10.1.0.2"), false);
            
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "11.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "11.2.0.3"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "11.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "11.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "11.1.0.6"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "10.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "10.2.0.3"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "10.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "10.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "10.1.0.5"), false);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "10.1.0.4"), false);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "10.1.0.3"), false);
            Assert.AreEqual(ckdb.CheckConnect("12.1.0.1", "10.1.0.2"), false);
            
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "11.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "11.2.0.3"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "11.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "11.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "11.1.0.6"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "10.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "10.2.0.3"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "10.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "10.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "10.1.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "10.1.0.3"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "10.1.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "9.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "9.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.2", "9.2.0.3"), false);

            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "11.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "11.1.0.6"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "10.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "10.2.0.3"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "10.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "10.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "10.1.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "10.1.0.3"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "10.1.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "9.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "9.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.2.0.1", "9.2.0.3"), false);

            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "11.1.0.6"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "10.2.0.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "10.2.0.3"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "10.2.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "10.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "10.1.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "10.1.0.3"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "10.1.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "9.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("11.1.0.7", "9.2.0.3"), false);

            Assert.AreEqual(ckdb.CheckConnect("11.1.0.6", "11.1.0.6"), true);

            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "11.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "11.1.0.6"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "10.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "10.1.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "9.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "9.2.0.3"), false);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "9.0.1.4"), false);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "9.0.1.0"), false);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "8.1.7.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "8.1.7.0"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.2.0.4", "8.0.6.3"), false);

            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "11.2.0.1"), false);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "11.1.0.6"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "10.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "10.1.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "9.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "9.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "9.0.1.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "9.0.1.0"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "8.1.7.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "8.1.7.0"), true);
            Assert.AreEqual(ckdb.CheckConnect("10.1.0.5", "8.0.6.3"), false);

            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "11.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "11.1.0.7"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "11.1.0.6"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "10.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "10.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "10.1.0.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "10.1.0.2"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "9.2.0.8"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "9.2.0.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "9.2.0.1"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "9.0.1.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "9.0.1.0"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "8.1.7.4"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "8.1.7.0"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "8.0.6.3"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "8.0.6.0"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "8.0.5.2"), false);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "7.3.4.5"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "7.3.4.0"), true);
            Assert.AreEqual(ckdb.CheckConnect("9.2.0.8", "7.2.3.0"), false);
        }
        [Test]
        public void CheckConnectStatus()
        {
            V2oCheckDB ckdb = new V2oCheckDB();
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "12.1.0.2", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "12.1.0.1", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "11.2.0.4", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "11.2.0.3", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "11.2.0.2", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "11.2.0.1", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "11.1.0.7", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "11.1.0.6", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "10.2.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "10.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "10.2.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "10.2.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "10.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "10.1.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "10.1.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "10.1.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.2", "10.1.0.2", "YES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "12.1.0.2", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "12.1.0.1", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.2.0.4", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.2.0.3", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.2.0.2", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.2.0.1", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.1.0.7", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.1.0.6", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.1.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.1.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.1.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.1.0.2", "YES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "12.1.0.2", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "12.1.0.1", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.2.0.4", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.2.0.3", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.2.0.2", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.2.0.1", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.1.0.7", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.1.0.6", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.1.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.1.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.1.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.1.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "9.2.0.8", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "9.2.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "9.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "9.2.0.3", "YES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "12.1.0.1", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.2.0.4", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.2.0.3", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.2.0.2", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.2.0.1", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.1.0.7", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.1.0.6", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.1.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.1.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.1.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.1.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "9.2.0.8", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "9.2.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "9.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "9.2.0.3", "YES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "12.1.0.1", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.2.0.4", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.2.0.3", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.2.0.2", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.2.0.1", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.1.0.7", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.1.0.6", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.1.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.1.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.1.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.1.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "9.2.0.8", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "9.2.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "9.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "9.2.0.3", "YES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "12.1.0.1", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.2.0.4", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.2.0.3", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.2.0.2", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.2.0.1", "YES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.1.0.7", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.1.0.6", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.1.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.1.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.1.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.1.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "9.2.0.8", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "9.2.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "9.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "9.2.0.3", "YES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.1.0.7", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.1.0.6", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.1.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.1.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.1.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.1.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "9.2.0.8", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "9.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "9.2.0.3", "YES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.6", "11.1.0.6", "YES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.1.0.7", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.1.0.6", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.1.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.1.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.2.0.8", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.2.0.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.0.1.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.0.1.0", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "8.1.7.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "8.1.7.0", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "8.0.6.3", "YES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "11.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "11.1.0.7", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "11.1.0.6", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "10.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "10.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "10.1.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "10.1.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.2.0.8", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.0.1.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.0.1.0", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "8.1.7.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "8.1.7.0", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "8.0.6.3", "YES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "11.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "11.1.0.7", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "11.1.0.6", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "10.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "10.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "10.1.0.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "10.1.0.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.2.0.8", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.2.0.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.2.0.1", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.0.1.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.0.1.0", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.1.7.4", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.1.7.0", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.0.6.3", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.0.6.0", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.0.5.2", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "7.3.4.5", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "7.3.4.0", "YES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "7.2.3.0", "YES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "12.1.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.2.0.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.2.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.2.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.1.0.7", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.1.0.6", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.5", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.4", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.3", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.2", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.1.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.1.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.1.0.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.1.0.2", "ES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "12.1.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.2.0.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.2.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.2.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.1.0.7", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.1.0.6", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.5", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.4", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.3", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.2", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.1.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.1.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.1.0.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.1.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "9.2.0.8", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "9.2.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "9.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "9.2.0.3", "ES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "12.1.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.2.0.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.2.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.2.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.1.0.7", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.1.0.6", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.5", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.4", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.3", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.2", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.1.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.1.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.1.0.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.1.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "9.2.0.8", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "9.2.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "9.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "9.2.0.3", "ES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "12.1.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.2.0.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.2.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.2.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.1.0.7", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.1.0.6", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.5", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.4", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.3", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.2", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.1.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.1.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.1.0.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.1.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "9.2.0.8", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "9.2.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "9.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "9.2.0.3", "ES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "12.1.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.2.0.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.2.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.2.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.1.0.7", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.1.0.6", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.5", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.4", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.3", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.2", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.1.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.1.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.1.0.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.1.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "9.2.0.8", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "9.2.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "9.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "9.2.0.3", "ES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "12.1.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.2.0.4", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.2.0.3", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.2.0.2", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.2.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.1.0.7", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.1.0.6", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.5", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.4", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.3", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.2", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.1.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.1.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.1.0.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.1.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "9.2.0.8", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "9.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "9.2.0.3", "ES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.6", "11.1.0.6", "ES"), true);

            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "12.1.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "11.2.0.4", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "11.2.0.3", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "11.2.0.2", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "11.2.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "11.1.0.7", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "11.1.0.6", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "10.2.0.5", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "10.2.0.4", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "10.2.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "10.1.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "10.1.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "9.2.0.8", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "9.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "9.2.0.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "9.0.1.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "9.0.1.0", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "8.1.7.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "8.1.7.0", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "8.0.6.3", "ES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "12.1.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.2.0.4", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.2.0.3", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.2.0.2", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.2.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.1.0.7", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.1.0.6", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.2.0.5", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.2.0.4", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.2.0.1", "ES"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.1.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.1.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.2.0.8", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.2.0.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.0.1.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.0.1.0", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "8.1.7.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "8.1.7.0", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "8.0.6.3", "ES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "12.1.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "11.2.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "11.1.0.7", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "11.1.0.6", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "10.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "10.2.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "10.1.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "10.1.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.2.0.8", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.2.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.0.1.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.0.1.0", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "8.1.7.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "8.1.7.0", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "8.0.6.3", "ES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "11.2.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "11.1.0.7", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "11.1.0.6", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "10.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "10.2.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "10.1.0.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "10.1.0.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.2.0.8", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.2.0.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.2.0.1", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.0.1.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.0.1.0", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.1.7.4", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.1.7.0", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.0.6.3", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.0.6.0", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.0.5.2", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "7.3.4.5", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "7.3.4.0", "ES"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "7.2.3.0", "ES"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "12.1.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.1.0.7", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "11.1.0.6", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.5", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.1.0.5", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.1.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.1.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("12.1.0.1", "10.1.0.2", "WAS"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "12.1.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.1.0.7", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "11.1.0.6", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.5", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.1.0.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.1.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.1.0.3", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "10.1.0.2", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "9.2.0.8", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "9.2.0.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "9.2.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.4", "9.2.0.3", "WAS"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "12.1.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.1.0.7", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "11.1.0.6", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.5", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.1.0.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.1.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.1.0.3", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "10.1.0.2", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "9.2.0.8", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "9.2.0.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "9.2.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.3", "9.2.0.3", "WAS"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "12.1.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.1.0.7", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "11.1.0.6", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.5", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.1.0.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.1.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.1.0.3", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "10.1.0.2", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "9.2.0.8", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "9.2.0.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "9.2.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.2", "9.2.0.3", "WAS"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "12.1.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.1.0.7", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "11.1.0.6", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.5", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.1.0.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.1.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.1.0.3", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "10.1.0.2", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "9.2.0.8", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "9.2.0.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "9.2.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.2.0.1", "9.2.0.3", "WAS"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "12.1.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.1.0.7", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "11.1.0.6", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.5", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.1.0.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.1.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.1.0.3", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "10.1.0.2", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "9.2.0.8", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "9.2.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.7", "9.2.0.3", "WAS"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("11.1.0.6", "11.1.0.6", "WAS"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "12.1.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "11.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "11.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "11.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "11.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "11.1.0.7", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "11.1.0.6", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "10.2.0.5", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "10.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "10.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "10.1.0.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "10.1.0.2", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "9.2.0.8", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "9.2.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "9.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "9.0.1.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "9.0.1.0", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "8.1.7.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "8.1.7.0", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.5", "8.0.6.3", "WAS"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "12.1.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.2.0.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.1.0.7", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "11.1.0.6", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.2.0.5", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.2.0.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.1.0.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "10.1.0.2", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.2.0.8", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.2.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.2.0.3", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.0.1.4", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "9.0.1.0", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "8.1.7.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "8.1.7.0", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.2.0.4", "8.0.6.3", "WAS"), false);


            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "12.1.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "11.2.0.1", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "11.1.0.7", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "11.1.0.6", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "10.2.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "10.2.0.1", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "10.1.0.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "10.1.0.2", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.2.0.8", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.2.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.2.0.1", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.0.1.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "9.0.1.0", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "8.1.7.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "8.1.7.0", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("10.1.0.5", "8.0.6.3", "WAS"), false);

            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "11.2.0.1", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "11.1.0.7", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "11.1.0.6", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "10.2.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "10.2.0.1", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "10.1.0.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "10.1.0.2", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.2.0.8", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.2.0.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.2.0.1", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.0.1.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "9.0.1.0", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.1.7.4", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.1.7.0", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.0.6.3", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.0.6.0", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "8.0.5.2", "WAS"), false);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "7.3.4.5", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "7.3.4.0", "WAS"), true);
            Assert.AreEqual(ckdb.CheckConnectStatus("9.2.0.8", "7.2.3.0", "WAS"), false);

        }
        [Test]
        public void IsEE()
        {
            V2oCheckDB ckdb = new V2oCheckDB();
            Assert.AreEqual(ckdb.IsEE("Enterprise Edition"), true);
            Assert.AreEqual(ckdb.IsEE("Standard Edition"), false);
            Assert.AreEqual(ckdb.IsEE("Standard Edition One"), false);
            Assert.AreEqual(ckdb.IsEE("Workgroup Server"), false);
            Assert.AreEqual(ckdb.IsEE("不明"), false);

        }
        [Test]
        public void ReturnMajorRelease()
        {
            V2oCheckDB ckdb = new V2oCheckDB();
            Assert.AreEqual(ckdb.ReturnMajorRelease("12.1.0.2 (Terminal)"), "12.1");
            Assert.AreEqual(ckdb.ReturnMajorRelease("12.1.0.1"), "12.1");
            Assert.AreEqual(ckdb.ReturnMajorRelease("11.2.0.4 (Terminal)"), "11.2");
            Assert.AreEqual(ckdb.ReturnMajorRelease("11.2.0.2"), "11.2");
            Assert.AreEqual(ckdb.ReturnMajorRelease("11.2.0.1"), "11.2");
            Assert.AreEqual(ckdb.ReturnMajorRelease("11.1.0.7 (Terminal)"), "11.1");
            Assert.AreEqual(ckdb.ReturnMajorRelease("11.1.0.6"), "11.1");
            Assert.AreEqual(ckdb.ReturnMajorRelease("10.2.0.5 (Terminal)"), "10.2");
            Assert.AreEqual(ckdb.ReturnMajorRelease("10.2.0.1 - 10.2.0.4"), "10.2");
            Assert.AreEqual(ckdb.ReturnMajorRelease("10.1.0.5 (Terminal)"), "10.1");
            Assert.AreEqual(ckdb.ReturnMajorRelease("10.1.0.2 - 10.1.0.4"), "10.1");
            Assert.AreEqual(ckdb.ReturnMajorRelease(" 9.2.0.8 (Terminal)"), "9.2");
            Assert.AreEqual(ckdb.ReturnMajorRelease(" 9.2.0.5 - 9.2.0.7"), "9.2");
            Assert.AreEqual(ckdb.ReturnMajorRelease(" 9.2.0.4"), "9.2");
            Assert.AreEqual(ckdb.ReturnMajorRelease(" 9.2.0.1 - 9.2.0.3"), "9.2");
            Assert.AreEqual(ckdb.ReturnMajorRelease(" 9.0.1.4 (Terminal)"), "9.0");
            Assert.AreEqual(ckdb.ReturnMajorRelease(" 9.0.1.0 - 9.0.1.3"), "9.0");
            Assert.AreEqual(ckdb.ReturnMajorRelease(" 8.1.7.4 (Terminal)"), "8.1");
            Assert.AreEqual(ckdb.ReturnMajorRelease(" 8.1.7.0 - 8.1.7.3"), "8.1");
            Assert.AreEqual(ckdb.ReturnMajorRelease(" 8.1.6.x"), "8.1");
            Assert.AreEqual(ckdb.ReturnMajorRelease(" 8.1.5.x"), "8.1");
            Assert.AreEqual(ckdb.ReturnMajorRelease(" 8.0.6.x"), "8.0");
            Assert.AreEqual(ckdb.ReturnMajorRelease("不明"), "");
            Assert.AreEqual(ckdb.ReturnMajorRelease("一覧になし"), "");
        }
    }
}
